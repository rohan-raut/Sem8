{"cells":[{"attachments":{},"cell_type":"markdown","metadata":{},"source":["**Importing necessary packages**"]},{"cell_type":"code","execution_count":1,"metadata":{"trusted":true},"outputs":[],"source":["import numpy as np\n","import pandas as pd"]},{"attachments":{},"cell_type":"markdown","metadata":{},"source":["**STEP -1 import and analyze the data set**"]},{"cell_type":"code","execution_count":2,"metadata":{"_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","trusted":true},"outputs":[{"name":"stdout","output_type":"stream","text":["Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/imdb.npz\n","17464789/17464789 [==============================] - 3s 0us/step\n"]}],"source":["#loading imdb data with most frequent 10000 words\n","\n","from keras.datasets import imdb\n","(X_train, y_train), (X_test, y_test) = imdb.load_data(num_words=10000)\n"]},{"attachments":{},"cell_type":"markdown","metadata":{},"source":["**Let's check dimentions of dataset**"]},{"cell_type":"code","execution_count":3,"metadata":{"trusted":true},"outputs":[{"data":{"text/plain":["(25000,)"]},"execution_count":3,"metadata":{},"output_type":"execute_result"}],"source":["X_train.shape"]},{"cell_type":"code","execution_count":4,"metadata":{"trusted":true},"outputs":[{"data":{"text/plain":["(25000,)"]},"execution_count":4,"metadata":{},"output_type":"execute_result"}],"source":["X_test.shape"]},{"attachments":{},"cell_type":"markdown","metadata":{},"source":["**Function to perform relevant sequence adding on the data**"]},{"cell_type":"code","execution_count":5,"metadata":{"trusted":true},"outputs":[],"source":["def vectorize(sequences, dimension = 10000):\n","    results = np.zeros((len(sequences), dimension))\n","    for i, sequence in enumerate(sequences):\n","        results[i, sequence] = 1\n","    return results\n"," \n"]},{"cell_type":"code","execution_count":6,"metadata":{"trusted":true},"outputs":[],"source":["#consolidating data for EDA\n","data = np.concatenate((X_train, X_test), axis=0)\n","label = np.concatenate((y_train, y_test), axis=0)"]},{"cell_type":"code","execution_count":7,"metadata":{"trusted":true},"outputs":[{"name":"stdout","output_type":"stream","text":["Categories: [0 1]\n","Number of unique words: 9998\n"]}],"source":["print(\"Categories:\", np.unique(label))\n","print(\"Number of unique words:\", len(np.unique(np.hstack(data))))"]},{"cell_type":"code","execution_count":8,"metadata":{"trusted":true},"outputs":[{"name":"stdout","output_type":"stream","text":["Average Review length: 234.75892\n","Standard Deviation: 173\n"]}],"source":["length = [len(i) for i in data]\n","print(\"Average Review length:\", np.mean(length))\n","print(\"Standard Deviation:\", round(np.std(length)))"]},{"attachments":{},"cell_type":"markdown","metadata":{},"source":["**Let's look at a single training example:**"]},{"cell_type":"code","execution_count":9,"metadata":{"trusted":true},"outputs":[{"name":"stdout","output_type":"stream","text":["Label: 1\n"]}],"source":["print(\"Label:\", label[0])\n"]},{"cell_type":"code","execution_count":10,"metadata":{"trusted":true},"outputs":[{"name":"stdout","output_type":"stream","text":["[1, 14, 22, 16, 43, 530, 973, 1622, 1385, 65, 458, 4468, 66, 3941, 4, 173, 36, 256, 5, 25, 100, 43, 838, 112, 50, 670, 2, 9, 35, 480, 284, 5, 150, 4, 172, 112, 167, 2, 336, 385, 39, 4, 172, 4536, 1111, 17, 546, 38, 13, 447, 4, 192, 50, 16, 6, 147, 2025, 19, 14, 22, 4, 1920, 4613, 469, 4, 22, 71, 87, 12, 16, 43, 530, 38, 76, 15, 13, 1247, 4, 22, 17, 515, 17, 12, 16, 626, 18, 2, 5, 62, 386, 12, 8, 316, 8, 106, 5, 4, 2223, 5244, 16, 480, 66, 3785, 33, 4, 130, 12, 16, 38, 619, 5, 25, 124, 51, 36, 135, 48, 25, 1415, 33, 6, 22, 12, 215, 28, 77, 52, 5, 14, 407, 16, 82, 2, 8, 4, 107, 117, 5952, 15, 256, 4, 2, 7, 3766, 5, 723, 36, 71, 43, 530, 476, 26, 400, 317, 46, 7, 4, 2, 1029, 13, 104, 88, 4, 381, 15, 297, 98, 32, 2071, 56, 26, 141, 6, 194, 7486, 18, 4, 226, 22, 21, 134, 476, 26, 480, 5, 144, 30, 5535, 18, 51, 36, 28, 224, 92, 25, 104, 4, 226, 65, 16, 38, 1334, 88, 12, 16, 283, 5, 16, 4472, 113, 103, 32, 15, 16, 5345, 19, 178, 32]\n"]}],"source":["print(data[0])"]},{"attachments":{},"cell_type":"markdown","metadata":{},"source":["**Let's decode the first review**"]},{"cell_type":"code","execution_count":11,"metadata":{"trusted":true},"outputs":[{"name":"stdout","output_type":"stream","text":["Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/imdb_word_index.json\n","1641221/1641221 [==============================] - 0s 0us/step\n","# this film was just brilliant casting location scenery story direction everyone's really suited the part they played and you could just imagine being there robert # is an amazing actor and now the same being director # father came from the same scottish island as myself so i loved the fact there was a real connection with this film the witty remarks throughout the film were great it was just brilliant so much that i bought the film as soon as it was released for # and would recommend it to everyone to watch and the fly fishing was amazing really cried at the end it was so sad and you know what they say if you cry at a film it must have been good and this definitely was also # to the two little boy's that played the # of norman and paul they were just brilliant children are often left out of the # list i think because the stars that play them all grown up are such a big profile for the whole film but these children are amazing and should be praised for what they have done don't you think the whole story was so lovely because it was true and was someone's life after all that was shared with us all\n"]}],"source":["index = imdb.get_word_index()\n","reverse_index = dict([(value, key) for (key, value) in index.items()]) \n","decoded = \" \".join( [reverse_index.get(i - 3, \"#\") for i in data[0]] )\n","print(decoded) "]},{"cell_type":"code","execution_count":12,"metadata":{"trusted":true},"outputs":[],"source":["#Adding sequence to data\n","data = vectorize(data)\n","label = np.array(label).astype(\"float32\")\n"]},{"cell_type":"code","execution_count":13,"metadata":{"trusted":true},"outputs":[{"data":{"text/plain":["array([1., 0., 0., ..., 0., 0., 0.], dtype=float32)"]},"execution_count":13,"metadata":{},"output_type":"execute_result"}],"source":["label"]},{"attachments":{},"cell_type":"markdown","metadata":{},"source":["**Let's check distribution of data**"]},{"cell_type":"code","execution_count":14,"metadata":{"trusted":true},"outputs":[],"source":["#To plot for EDA\n","import seaborn as sns\n","sns.set(color_codes=True)\n","import matplotlib.pyplot as plt\n","%matplotlib inline"]},{"cell_type":"code","execution_count":15,"metadata":{"trusted":true},"outputs":[{"data":{"text/plain":["<AxesSubplot:xlabel='label', ylabel='count'>"]},"execution_count":15,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"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","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"},"output_type":"display_data"}],"source":["labelDF=pd.DataFrame({'label':label})\n","sns.countplot(x='label', data=labelDF)"]},{"attachments":{},"cell_type":"markdown","metadata":{},"source":["For above analysis it is clear that data has equel distribution of sentiments.This will help us building a good model."]},{"attachments":{},"cell_type":"markdown","metadata":{},"source":["**Creating train and test data set**"]},{"cell_type":"code","execution_count":16,"metadata":{"trusted":true},"outputs":[],"source":["from sklearn.model_selection import train_test_split\n","X_train, X_test, y_train, y_test = train_test_split(data,label, test_size=0.30, random_state=1)"]},{"cell_type":"code","execution_count":17,"metadata":{"trusted":true},"outputs":[{"data":{"text/plain":["(35000, 10000)"]},"execution_count":17,"metadata":{},"output_type":"execute_result"}],"source":["X_train.shape"]},{"cell_type":"code","execution_count":18,"metadata":{"trusted":true},"outputs":[{"data":{"text/plain":["(15000, 10000)"]},"execution_count":18,"metadata":{},"output_type":"execute_result"}],"source":["X_test.shape"]},{"attachments":{},"cell_type":"markdown","metadata":{},"source":["**Let's create  sequential model**"]},{"cell_type":"code","execution_count":19,"metadata":{"trusted":true},"outputs":[],"source":["from keras.utils import to_categorical\n","from keras import models\n","from keras import layers"]},{"cell_type":"code","execution_count":20,"metadata":{"trusted":true},"outputs":[{"name":"stdout","output_type":"stream","text":["Model: \"sequential\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," dense (Dense)               (None, 50)                500050    \n","                                                                 \n"," dropout (Dropout)           (None, 50)                0         \n","                                                                 \n"," dense_1 (Dense)             (None, 50)                2550      \n","                                                                 \n"," dropout_1 (Dropout)         (None, 50)                0         \n","                                                                 \n"," dense_2 (Dense)             (None, 50)                2550      \n","                                                                 \n"," dense_3 (Dense)             (None, 1)                 51        \n","                                                                 \n","=================================================================\n","Total params: 505,201\n","Trainable params: 505,201\n","Non-trainable params: 0\n","_________________________________________________________________\n"]}],"source":["model = models.Sequential()\n","# Input - Layer\n","model.add(layers.Dense(50, activation = \"relu\", input_shape=(10000, )))\n","# Hidden - Layers\n","model.add(layers.Dropout(0.3, noise_shape=None, seed=None))\n","model.add(layers.Dense(50, activation = \"relu\"))\n","model.add(layers.Dropout(0.2, noise_shape=None, seed=None))\n","model.add(layers.Dense(50, activation = \"relu\"))\n","# Output- Layer\n","model.add(layers.Dense(1, activation = \"sigmoid\"))\n","model.summary()\n"]},{"cell_type":"code","execution_count":21,"metadata":{"trusted":true},"outputs":[],"source":["#For early stopping \n","import tensorflow as tf\n","callback = tf.keras.callbacks.EarlyStopping(monitor='loss', patience=3)"]},{"cell_type":"code","execution_count":22,"metadata":{"trusted":true},"outputs":[],"source":["model.compile(\n"," optimizer = \"adam\",\n"," loss = \"binary_crossentropy\",\n"," metrics = [\"accuracy\"]\n",")"]},{"cell_type":"code","execution_count":23,"metadata":{"trusted":true},"outputs":[{"name":"stdout","output_type":"stream","text":["Epoch 1/100\n","875/875 [==============================] - 15s 16ms/step - loss: 0.3251 - accuracy: 0.8618 - val_loss: 0.2637 - val_accuracy: 0.8905\n","Epoch 2/100\n","875/875 [==============================] - 9s 10ms/step - loss: 0.1984 - accuracy: 0.9229 - val_loss: 0.2742 - val_accuracy: 0.8889\n","Epoch 3/100\n","875/875 [==============================] - 9s 10ms/step - loss: 0.1378 - accuracy: 0.9483 - val_loss: 0.3456 - val_accuracy: 0.8805\n","Epoch 4/100\n","875/875 [==============================] - 8s 9ms/step - loss: 0.1015 - accuracy: 0.9619 - val_loss: 0.3908 - val_accuracy: 0.8819\n","Epoch 5/100\n","875/875 [==============================] - 9s 10ms/step - loss: 0.0765 - accuracy: 0.9703 - val_loss: 0.4354 - val_accuracy: 0.8813\n","Epoch 6/100\n","875/875 [==============================] - 9s 10ms/step - loss: 0.0640 - accuracy: 0.9765 - val_loss: 0.4764 - val_accuracy: 0.8799\n","Epoch 7/100\n","875/875 [==============================] - 8s 10ms/step - loss: 0.0590 - accuracy: 0.9766 - val_loss: 0.4969 - val_accuracy: 0.8815\n","Epoch 8/100\n","875/875 [==============================] - 8s 10ms/step - loss: 0.0493 - accuracy: 0.9811 - val_loss: 0.5938 - val_accuracy: 0.8842\n","Epoch 9/100\n","875/875 [==============================] - 8s 9ms/step - loss: 0.0435 - accuracy: 0.9838 - val_loss: 0.6029 - val_accuracy: 0.8815\n","Epoch 10/100\n","875/875 [==============================] - 8s 9ms/step - loss: 0.0428 - accuracy: 0.9829 - val_loss: 0.5171 - val_accuracy: 0.8809\n","Epoch 11/100\n","875/875 [==============================] - 10s 11ms/step - loss: 0.0394 - accuracy: 0.9847 - val_loss: 0.5615 - val_accuracy: 0.8804\n","Epoch 12/100\n","875/875 [==============================] - 8s 10ms/step - loss: 0.0385 - accuracy: 0.9845 - val_loss: 0.5879 - val_accuracy: 0.8831\n","Epoch 13/100\n","875/875 [==============================] - 8s 9ms/step - loss: 0.0323 - accuracy: 0.9869 - val_loss: 0.5993 - val_accuracy: 0.8853\n","Epoch 14/100\n","875/875 [==============================] - 7s 8ms/step - loss: 0.0340 - accuracy: 0.9860 - val_loss: 0.6658 - val_accuracy: 0.8848\n","Epoch 15/100\n","875/875 [==============================] - 7s 8ms/step - loss: 0.0338 - accuracy: 0.9866 - val_loss: 0.6686 - val_accuracy: 0.8831\n","Epoch 16/100\n","875/875 [==============================] - 8s 9ms/step - loss: 0.0286 - accuracy: 0.9886 - val_loss: 0.7215 - val_accuracy: 0.8825\n","Epoch 17/100\n","875/875 [==============================] - 8s 10ms/step - loss: 0.0277 - accuracy: 0.9881 - val_loss: 0.7170 - val_accuracy: 0.8828\n","Epoch 18/100\n","875/875 [==============================] - 8s 9ms/step - loss: 0.0294 - accuracy: 0.9888 - val_loss: 0.6234 - val_accuracy: 0.8778\n","Epoch 19/100\n","875/875 [==============================] - 8s 9ms/step - loss: 0.0266 - accuracy: 0.9894 - val_loss: 0.5884 - val_accuracy: 0.8783\n","Epoch 20/100\n","875/875 [==============================] - 8s 9ms/step - loss: 0.0253 - accuracy: 0.9888 - val_loss: 0.6780 - val_accuracy: 0.8803\n","Epoch 21/100\n","875/875 [==============================] - 7s 9ms/step - loss: 0.0248 - accuracy: 0.9896 - val_loss: 0.7056 - val_accuracy: 0.8833\n","Epoch 22/100\n","875/875 [==============================] - 8s 9ms/step - loss: 0.0269 - accuracy: 0.9887 - val_loss: 0.7517 - val_accuracy: 0.8807\n","Epoch 23/100\n","875/875 [==============================] - 8s 9ms/step - loss: 0.0256 - accuracy: 0.9899 - val_loss: 0.7330 - val_accuracy: 0.8814\n","Epoch 24/100\n","875/875 [==============================] - 7s 8ms/step - loss: 0.0231 - accuracy: 0.9909 - val_loss: 0.7312 - val_accuracy: 0.8810\n","Epoch 25/100\n","875/875 [==============================] - 8s 10ms/step - loss: 0.0244 - accuracy: 0.9894 - val_loss: 0.7113 - val_accuracy: 0.8847\n","Epoch 26/100\n","875/875 [==============================] - 9s 10ms/step - loss: 0.0228 - accuracy: 0.9904 - val_loss: 0.7679 - val_accuracy: 0.8820\n","Epoch 27/100\n","875/875 [==============================] - 8s 9ms/step - loss: 0.0229 - accuracy: 0.9904 - val_loss: 0.7327 - val_accuracy: 0.8819\n","Epoch 28/100\n","875/875 [==============================] - 8s 9ms/step - loss: 0.0204 - accuracy: 0.9915 - val_loss: 0.8254 - val_accuracy: 0.8843\n","Epoch 29/100\n","875/875 [==============================] - 7s 8ms/step - loss: 0.0189 - accuracy: 0.9913 - val_loss: 0.8224 - val_accuracy: 0.8828\n","Epoch 30/100\n","875/875 [==============================] - 7s 8ms/step - loss: 0.0198 - accuracy: 0.9913 - val_loss: 0.7843 - val_accuracy: 0.8841\n","Epoch 31/100\n","875/875 [==============================] - 8s 9ms/step - loss: 0.0201 - accuracy: 0.9911 - val_loss: 0.8507 - val_accuracy: 0.8835\n","Epoch 32/100\n","875/875 [==============================] - 8s 9ms/step - loss: 0.0207 - accuracy: 0.9917 - val_loss: 0.8062 - val_accuracy: 0.8795\n"]}],"source":["results = model.fit(\n"," X_train, y_train,\n"," epochs= 100,\n"," batch_size = 40,\n"," validation_data = (X_test, y_test),\n"," callbacks=[callback]\n",")"]},{"attachments":{},"cell_type":"markdown","metadata":{},"source":["**Let's check mean accuracy of our model**"]},{"cell_type":"code","execution_count":24,"metadata":{"trusted":true},"outputs":[{"name":"stdout","output_type":"stream","text":["0.8824604135006666\n"]}],"source":["print(np.mean(results.history[\"val_accuracy\"]))"]},{"cell_type":"code","execution_count":25,"metadata":{"trusted":true},"outputs":[{"name":"stdout","output_type":"stream","text":["dict_keys(['loss', 'accuracy', 'val_loss', 'val_accuracy'])\n"]},{"data":{"image/png":"","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"},"output_type":"display_data"},{"data":{"image/png":"","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"},"output_type":"display_data"}],"source":["#Let's plot training history of our model\n","\n","# list all data in history\n","print(results.history.keys())\n","# summarize history for accuracy\n","plt.plot(results.history['accuracy'])\n","plt.plot(results.history['val_accuracy'])\n","plt.title('model accuracy')\n","plt.ylabel('accuracy')\n","plt.xlabel('epoch')\n","plt.legend(['train', 'test'], loc='upper left')\n","plt.show()\n","# summarize history for loss\n","plt.plot(results.history['loss'])\n","plt.plot(results.history['val_loss'])\n","plt.title('model loss')\n","plt.ylabel('loss')\n","plt.xlabel('epoch')\n","plt.legend(['train', 'test'], loc='upper left')\n","plt.show()"]},{"cell_type":"code","execution_count":26,"metadata":{"trusted":true},"outputs":[{"name":"stdout","output_type":"stream","text":["469/469 [==============================] - 1s 2ms/step\n"]},{"data":{"text/plain":["array([[1.3325606e-02],\n","       [1.0000000e+00],\n","       [9.7790766e-01],\n","       ...,\n","       [7.3472845e-16],\n","       [4.2330548e-03],\n","       [1.0000000e+00]], dtype=float32)"]},"execution_count":26,"metadata":{},"output_type":"execute_result"}],"source":["model.predict(X_test)"]}],"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.10.4"}},"nbformat":4,"nbformat_minor":4}
