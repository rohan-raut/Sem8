{
 "cells": [
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.033948,
     "end_time": "2020-10-07T20:55:54.921799",
     "exception": false,
     "start_time": "2020-10-07T20:55:54.887851",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<a id = 'library'></a>\n",
    "# Importing libraries and the dataset\n",
    "Unlike the conventional way, I import the library when it is needed. It will actually help you to understand where the application of the class and it's function is used"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2020-10-07T20:55:54.996776Z",
     "iopub.status.busy": "2020-10-07T20:55:54.995700Z",
     "iopub.status.idle": "2020-10-07T20:55:54.999523Z",
     "shell.execute_reply": "2020-10-07T20:55:54.998860Z"
    },
    "papermill": {
     "duration": 0.043524,
     "end_time": "2020-10-07T20:55:54.999653",
     "exception": false,
     "start_time": "2020-10-07T20:55:54.956129",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#Importing the pandas for data processing and numpy for numerical computing\n",
    "import numpy as np\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-07T20:55:55.075743Z",
     "iopub.status.busy": "2020-10-07T20:55:55.074948Z",
     "iopub.status.idle": "2020-10-07T20:55:56.076895Z",
     "shell.execute_reply": "2020-10-07T20:55:56.076061Z"
    },
    "papermill": {
     "duration": 1.041634,
     "end_time": "2020-10-07T20:55:56.077031",
     "exception": false,
     "start_time": "2020-10-07T20:55:55.035397",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\gdalv\\AppData\\Roaming\\Python\\Python310\\site-packages\\sklearn\\utils\\deprecation.py:87: FutureWarning: Function load_boston is deprecated; `load_boston` is deprecated in 1.0 and will be removed in 1.2.\n",
      "\n",
      "    The Boston housing prices dataset has an ethical problem. You can refer to\n",
      "    the documentation of this function for further details.\n",
      "\n",
      "    The scikit-learn maintainers therefore strongly discourage the use of this\n",
      "    dataset unless the purpose of the code is to study and educate about\n",
      "    ethical issues in data science and machine learning.\n",
      "\n",
      "    In this special case, you can fetch the dataset from the original\n",
      "    source::\n",
      "\n",
      "        import pandas as pd\n",
      "        import numpy as np\n",
      "\n",
      "\n",
      "        data_url = \"http://lib.stat.cmu.edu/datasets/boston\"\n",
      "        raw_df = pd.read_csv(data_url, sep=\"\\s+\", skiprows=22, header=None)\n",
      "        data = np.hstack([raw_df.values[::2, :], raw_df.values[1::2, :2]])\n",
      "        target = raw_df.values[1::2, 2]\n",
      "\n",
      "    Alternative datasets include the California housing dataset (i.e.\n",
      "    :func:`~sklearn.datasets.fetch_california_housing`) and the Ames housing\n",
      "    dataset. You can load the datasets as follows::\n",
      "\n",
      "        from sklearn.datasets import fetch_california_housing\n",
      "        housing = fetch_california_housing()\n",
      "\n",
      "    for the California housing dataset and::\n",
      "\n",
      "        from sklearn.datasets import fetch_openml\n",
      "        housing = fetch_openml(name=\"house_prices\", as_frame=True)\n",
      "\n",
      "    for the Ames housing dataset.\n",
      "    \n",
      "  warnings.warn(msg, category=FutureWarning)\n"
     ]
    }
   ],
   "source": [
    "# Importing the Boston Housing dataset from the sklearn\n",
    "from sklearn.datasets import load_boston\n",
    "boston = load_boston()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-07T20:55:56.153905Z",
     "iopub.status.busy": "2020-10-07T20:55:56.153131Z",
     "iopub.status.idle": "2020-10-07T20:55:56.156586Z",
     "shell.execute_reply": "2020-10-07T20:55:56.155999Z"
    },
    "papermill": {
     "duration": 0.045059,
     "end_time": "2020-10-07T20:55:56.156714",
     "exception": false,
     "start_time": "2020-10-07T20:55:56.111655",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#Converting the data into pandas dataframe\n",
    "data = pd.DataFrame(boston.data)"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.038008,
     "end_time": "2020-10-07T20:55:56.229473",
     "exception": false,
     "start_time": "2020-10-07T20:55:56.191465",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### First look at the dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-07T20:55:56.320312Z",
     "iopub.status.busy": "2020-10-07T20:55:56.319522Z",
     "iopub.status.idle": "2020-10-07T20:55:56.335439Z",
     "shell.execute_reply": "2020-10-07T20:55:56.336038Z"
    },
    "papermill": {
     "duration": 0.071719,
     "end_time": "2020-10-07T20:55:56.336192",
     "exception": false,
     "start_time": "2020-10-07T20:55:56.264473",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>8</th>\n",
       "      <th>9</th>\n",
       "      <th>10</th>\n",
       "      <th>11</th>\n",
       "      <th>12</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.00632</td>\n",
       "      <td>18.0</td>\n",
       "      <td>2.31</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.538</td>\n",
       "      <td>6.575</td>\n",
       "      <td>65.2</td>\n",
       "      <td>4.0900</td>\n",
       "      <td>1.0</td>\n",
       "      <td>296.0</td>\n",
       "      <td>15.3</td>\n",
       "      <td>396.90</td>\n",
       "      <td>4.98</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.02731</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.07</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.469</td>\n",
       "      <td>6.421</td>\n",
       "      <td>78.9</td>\n",
       "      <td>4.9671</td>\n",
       "      <td>2.0</td>\n",
       "      <td>242.0</td>\n",
       "      <td>17.8</td>\n",
       "      <td>396.90</td>\n",
       "      <td>9.14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.02729</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.07</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.469</td>\n",
       "      <td>7.185</td>\n",
       "      <td>61.1</td>\n",
       "      <td>4.9671</td>\n",
       "      <td>2.0</td>\n",
       "      <td>242.0</td>\n",
       "      <td>17.8</td>\n",
       "      <td>392.83</td>\n",
       "      <td>4.03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.03237</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.18</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.458</td>\n",
       "      <td>6.998</td>\n",
       "      <td>45.8</td>\n",
       "      <td>6.0622</td>\n",
       "      <td>3.0</td>\n",
       "      <td>222.0</td>\n",
       "      <td>18.7</td>\n",
       "      <td>394.63</td>\n",
       "      <td>2.94</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.06905</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.18</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.458</td>\n",
       "      <td>7.147</td>\n",
       "      <td>54.2</td>\n",
       "      <td>6.0622</td>\n",
       "      <td>3.0</td>\n",
       "      <td>222.0</td>\n",
       "      <td>18.7</td>\n",
       "      <td>396.90</td>\n",
       "      <td>5.33</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        0     1     2    3      4      5     6       7    8      9     10  \\\n",
       "0  0.00632  18.0  2.31  0.0  0.538  6.575  65.2  4.0900  1.0  296.0  15.3   \n",
       "1  0.02731   0.0  7.07  0.0  0.469  6.421  78.9  4.9671  2.0  242.0  17.8   \n",
       "2  0.02729   0.0  7.07  0.0  0.469  7.185  61.1  4.9671  2.0  242.0  17.8   \n",
       "3  0.03237   0.0  2.18  0.0  0.458  6.998  45.8  6.0622  3.0  222.0  18.7   \n",
       "4  0.06905   0.0  2.18  0.0  0.458  7.147  54.2  6.0622  3.0  222.0  18.7   \n",
       "\n",
       "       11    12  \n",
       "0  396.90  4.98  \n",
       "1  396.90  9.14  \n",
       "2  392.83  4.03  \n",
       "3  394.63  2.94  \n",
       "4  396.90  5.33  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#First look at the data\n",
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-07T20:55:56.414589Z",
     "iopub.status.busy": "2020-10-07T20:55:56.413718Z",
     "iopub.status.idle": "2020-10-07T20:55:56.416948Z",
     "shell.execute_reply": "2020-10-07T20:55:56.416281Z"
    },
    "papermill": {
     "duration": 0.044642,
     "end_time": "2020-10-07T20:55:56.417100",
     "exception": false,
     "start_time": "2020-10-07T20:55:56.372458",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#Adding the feature names to the dataframe\n",
    "data.columns = boston.feature_names"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-07T20:55:56.500235Z",
     "iopub.status.busy": "2020-10-07T20:55:56.499280Z",
     "iopub.status.idle": "2020-10-07T20:55:56.501806Z",
     "shell.execute_reply": "2020-10-07T20:55:56.502396Z"
    },
    "papermill": {
     "duration": 0.048845,
     "end_time": "2020-10-07T20:55:56.502563",
     "exception": false,
     "start_time": "2020-10-07T20:55:56.453718",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#Adding the target variable to the dataset\n",
    "data['PRICE'] = boston.target "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-07T20:55:56.590835Z",
     "iopub.status.busy": "2020-10-07T20:55:56.586563Z",
     "iopub.status.idle": "2020-10-07T20:55:56.607051Z",
     "shell.execute_reply": "2020-10-07T20:55:56.606239Z"
    },
    "papermill": {
     "duration": 0.068592,
     "end_time": "2020-10-07T20:55:56.607185",
     "exception": false,
     "start_time": "2020-10-07T20:55:56.538593",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CRIM</th>\n",
       "      <th>ZN</th>\n",
       "      <th>INDUS</th>\n",
       "      <th>CHAS</th>\n",
       "      <th>NOX</th>\n",
       "      <th>RM</th>\n",
       "      <th>AGE</th>\n",
       "      <th>DIS</th>\n",
       "      <th>RAD</th>\n",
       "      <th>TAX</th>\n",
       "      <th>PTRATIO</th>\n",
       "      <th>B</th>\n",
       "      <th>LSTAT</th>\n",
       "      <th>PRICE</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.00632</td>\n",
       "      <td>18.0</td>\n",
       "      <td>2.31</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.538</td>\n",
       "      <td>6.575</td>\n",
       "      <td>65.2</td>\n",
       "      <td>4.0900</td>\n",
       "      <td>1.0</td>\n",
       "      <td>296.0</td>\n",
       "      <td>15.3</td>\n",
       "      <td>396.90</td>\n",
       "      <td>4.98</td>\n",
       "      <td>24.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.02731</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.07</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.469</td>\n",
       "      <td>6.421</td>\n",
       "      <td>78.9</td>\n",
       "      <td>4.9671</td>\n",
       "      <td>2.0</td>\n",
       "      <td>242.0</td>\n",
       "      <td>17.8</td>\n",
       "      <td>396.90</td>\n",
       "      <td>9.14</td>\n",
       "      <td>21.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.02729</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.07</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.469</td>\n",
       "      <td>7.185</td>\n",
       "      <td>61.1</td>\n",
       "      <td>4.9671</td>\n",
       "      <td>2.0</td>\n",
       "      <td>242.0</td>\n",
       "      <td>17.8</td>\n",
       "      <td>392.83</td>\n",
       "      <td>4.03</td>\n",
       "      <td>34.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.03237</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.18</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.458</td>\n",
       "      <td>6.998</td>\n",
       "      <td>45.8</td>\n",
       "      <td>6.0622</td>\n",
       "      <td>3.0</td>\n",
       "      <td>222.0</td>\n",
       "      <td>18.7</td>\n",
       "      <td>394.63</td>\n",
       "      <td>2.94</td>\n",
       "      <td>33.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.06905</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.18</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.458</td>\n",
       "      <td>7.147</td>\n",
       "      <td>54.2</td>\n",
       "      <td>6.0622</td>\n",
       "      <td>3.0</td>\n",
       "      <td>222.0</td>\n",
       "      <td>18.7</td>\n",
       "      <td>396.90</td>\n",
       "      <td>5.33</td>\n",
       "      <td>36.2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      CRIM    ZN  INDUS  CHAS    NOX     RM   AGE     DIS  RAD    TAX  \\\n",
       "0  0.00632  18.0   2.31   0.0  0.538  6.575  65.2  4.0900  1.0  296.0   \n",
       "1  0.02731   0.0   7.07   0.0  0.469  6.421  78.9  4.9671  2.0  242.0   \n",
       "2  0.02729   0.0   7.07   0.0  0.469  7.185  61.1  4.9671  2.0  242.0   \n",
       "3  0.03237   0.0   2.18   0.0  0.458  6.998  45.8  6.0622  3.0  222.0   \n",
       "4  0.06905   0.0   2.18   0.0  0.458  7.147  54.2  6.0622  3.0  222.0   \n",
       "\n",
       "   PTRATIO       B  LSTAT  PRICE  \n",
       "0     15.3  396.90   4.98   24.0  \n",
       "1     17.8  396.90   9.14   21.6  \n",
       "2     17.8  392.83   4.03   34.7  \n",
       "3     18.7  394.63   2.94   33.4  \n",
       "4     18.7  396.90   5.33   36.2  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Looking at the data with names and target variable\n",
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-07T20:55:56.688161Z",
     "iopub.status.busy": "2020-10-07T20:55:56.686923Z",
     "iopub.status.idle": "2020-10-07T20:55:56.692129Z",
     "shell.execute_reply": "2020-10-07T20:55:56.691293Z"
    },
    "papermill": {
     "duration": 0.048073,
     "end_time": "2020-10-07T20:55:56.692272",
     "exception": false,
     "start_time": "2020-10-07T20:55:56.644199",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(506, 14)\n"
     ]
    }
   ],
   "source": [
    "#Shape of the data\n",
    "print(data.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-07T20:55:56.778245Z",
     "iopub.status.busy": "2020-10-07T20:55:56.775133Z",
     "iopub.status.idle": "2020-10-07T20:55:56.783287Z",
     "shell.execute_reply": "2020-10-07T20:55:56.782651Z"
    },
    "papermill": {
     "duration": 0.051644,
     "end_time": "2020-10-07T20:55:56.783452",
     "exception": false,
     "start_time": "2020-10-07T20:55:56.731808",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "CRIM       0\n",
       "ZN         0\n",
       "INDUS      0\n",
       "CHAS       0\n",
       "NOX        0\n",
       "RM         0\n",
       "AGE        0\n",
       "DIS        0\n",
       "RAD        0\n",
       "TAX        0\n",
       "PTRATIO    0\n",
       "B          0\n",
       "LSTAT      0\n",
       "PRICE      0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Checking the null values in the dataset\n",
    "data.isnull().sum()"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.038629,
     "end_time": "2020-10-07T20:55:56.861275",
     "exception": false,
     "start_time": "2020-10-07T20:55:56.822646",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "No null values in the dataset, no missing value treatement needed"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-07T20:55:56.953447Z",
     "iopub.status.busy": "2020-10-07T20:55:56.952628Z",
     "iopub.status.idle": "2020-10-07T20:55:57.021634Z",
     "shell.execute_reply": "2020-10-07T20:55:57.020973Z"
    },
    "papermill": {
     "duration": 0.121217,
     "end_time": "2020-10-07T20:55:57.021775",
     "exception": false,
     "start_time": "2020-10-07T20:55:56.900558",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CRIM</th>\n",
       "      <th>ZN</th>\n",
       "      <th>INDUS</th>\n",
       "      <th>CHAS</th>\n",
       "      <th>NOX</th>\n",
       "      <th>RM</th>\n",
       "      <th>AGE</th>\n",
       "      <th>DIS</th>\n",
       "      <th>RAD</th>\n",
       "      <th>TAX</th>\n",
       "      <th>PTRATIO</th>\n",
       "      <th>B</th>\n",
       "      <th>LSTAT</th>\n",
       "      <th>PRICE</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>506.000000</td>\n",
       "      <td>506.000000</td>\n",
       "      <td>506.000000</td>\n",
       "      <td>506.000000</td>\n",
       "      <td>506.000000</td>\n",
       "      <td>506.000000</td>\n",
       "      <td>506.000000</td>\n",
       "      <td>506.000000</td>\n",
       "      <td>506.000000</td>\n",
       "      <td>506.000000</td>\n",
       "      <td>506.000000</td>\n",
       "      <td>506.000000</td>\n",
       "      <td>506.000000</td>\n",
       "      <td>506.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>3.613524</td>\n",
       "      <td>11.363636</td>\n",
       "      <td>11.136779</td>\n",
       "      <td>0.069170</td>\n",
       "      <td>0.554695</td>\n",
       "      <td>6.284634</td>\n",
       "      <td>68.574901</td>\n",
       "      <td>3.795043</td>\n",
       "      <td>9.549407</td>\n",
       "      <td>408.237154</td>\n",
       "      <td>18.455534</td>\n",
       "      <td>356.674032</td>\n",
       "      <td>12.653063</td>\n",
       "      <td>22.532806</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>8.601545</td>\n",
       "      <td>23.322453</td>\n",
       "      <td>6.860353</td>\n",
       "      <td>0.253994</td>\n",
       "      <td>0.115878</td>\n",
       "      <td>0.702617</td>\n",
       "      <td>28.148861</td>\n",
       "      <td>2.105710</td>\n",
       "      <td>8.707259</td>\n",
       "      <td>168.537116</td>\n",
       "      <td>2.164946</td>\n",
       "      <td>91.294864</td>\n",
       "      <td>7.141062</td>\n",
       "      <td>9.197104</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.006320</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.460000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.385000</td>\n",
       "      <td>3.561000</td>\n",
       "      <td>2.900000</td>\n",
       "      <td>1.129600</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>187.000000</td>\n",
       "      <td>12.600000</td>\n",
       "      <td>0.320000</td>\n",
       "      <td>1.730000</td>\n",
       "      <td>5.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>0.082045</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>5.190000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.449000</td>\n",
       "      <td>5.885500</td>\n",
       "      <td>45.025000</td>\n",
       "      <td>2.100175</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>279.000000</td>\n",
       "      <td>17.400000</td>\n",
       "      <td>375.377500</td>\n",
       "      <td>6.950000</td>\n",
       "      <td>17.025000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>0.256510</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>9.690000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.538000</td>\n",
       "      <td>6.208500</td>\n",
       "      <td>77.500000</td>\n",
       "      <td>3.207450</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>330.000000</td>\n",
       "      <td>19.050000</td>\n",
       "      <td>391.440000</td>\n",
       "      <td>11.360000</td>\n",
       "      <td>21.200000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>3.677083</td>\n",
       "      <td>12.500000</td>\n",
       "      <td>18.100000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.624000</td>\n",
       "      <td>6.623500</td>\n",
       "      <td>94.075000</td>\n",
       "      <td>5.188425</td>\n",
       "      <td>24.000000</td>\n",
       "      <td>666.000000</td>\n",
       "      <td>20.200000</td>\n",
       "      <td>396.225000</td>\n",
       "      <td>16.955000</td>\n",
       "      <td>25.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>88.976200</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>27.740000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.871000</td>\n",
       "      <td>8.780000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>12.126500</td>\n",
       "      <td>24.000000</td>\n",
       "      <td>711.000000</td>\n",
       "      <td>22.000000</td>\n",
       "      <td>396.900000</td>\n",
       "      <td>37.970000</td>\n",
       "      <td>50.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             CRIM          ZN       INDUS        CHAS         NOX          RM  \\\n",
       "count  506.000000  506.000000  506.000000  506.000000  506.000000  506.000000   \n",
       "mean     3.613524   11.363636   11.136779    0.069170    0.554695    6.284634   \n",
       "std      8.601545   23.322453    6.860353    0.253994    0.115878    0.702617   \n",
       "min      0.006320    0.000000    0.460000    0.000000    0.385000    3.561000   \n",
       "25%      0.082045    0.000000    5.190000    0.000000    0.449000    5.885500   \n",
       "50%      0.256510    0.000000    9.690000    0.000000    0.538000    6.208500   \n",
       "75%      3.677083   12.500000   18.100000    0.000000    0.624000    6.623500   \n",
       "max     88.976200  100.000000   27.740000    1.000000    0.871000    8.780000   \n",
       "\n",
       "              AGE         DIS         RAD         TAX     PTRATIO           B  \\\n",
       "count  506.000000  506.000000  506.000000  506.000000  506.000000  506.000000   \n",
       "mean    68.574901    3.795043    9.549407  408.237154   18.455534  356.674032   \n",
       "std     28.148861    2.105710    8.707259  168.537116    2.164946   91.294864   \n",
       "min      2.900000    1.129600    1.000000  187.000000   12.600000    0.320000   \n",
       "25%     45.025000    2.100175    4.000000  279.000000   17.400000  375.377500   \n",
       "50%     77.500000    3.207450    5.000000  330.000000   19.050000  391.440000   \n",
       "75%     94.075000    5.188425   24.000000  666.000000   20.200000  396.225000   \n",
       "max    100.000000   12.126500   24.000000  711.000000   22.000000  396.900000   \n",
       "\n",
       "            LSTAT       PRICE  \n",
       "count  506.000000  506.000000  \n",
       "mean    12.653063   22.532806  \n",
       "std      7.141062    9.197104  \n",
       "min      1.730000    5.000000  \n",
       "25%      6.950000   17.025000  \n",
       "50%     11.360000   21.200000  \n",
       "75%     16.955000   25.000000  \n",
       "max     37.970000   50.000000  "
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Checking the statistics of the data\n",
    "data.describe()"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.038841,
     "end_time": "2020-10-07T20:55:57.100719",
     "exception": false,
     "start_time": "2020-10-07T20:55:57.061878",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "This is sometimes very useful, for example if you look at the CRIM the max is 88.97 and 75% of the value is below 3.677083 and mean is 3.613524 so it means the max values is actually an outlier or there are outliers present in the column"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-07T20:55:57.195790Z",
     "iopub.status.busy": "2020-10-07T20:55:57.194932Z",
     "iopub.status.idle": "2020-10-07T20:55:57.199253Z",
     "shell.execute_reply": "2020-10-07T20:55:57.198271Z"
    },
    "papermill": {
     "duration": 0.059044,
     "end_time": "2020-10-07T20:55:57.199444",
     "exception": false,
     "start_time": "2020-10-07T20:55:57.140400",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 506 entries, 0 to 505\n",
      "Data columns (total 14 columns):\n",
      " #   Column   Non-Null Count  Dtype  \n",
      "---  ------   --------------  -----  \n",
      " 0   CRIM     506 non-null    float64\n",
      " 1   ZN       506 non-null    float64\n",
      " 2   INDUS    506 non-null    float64\n",
      " 3   CHAS     506 non-null    float64\n",
      " 4   NOX      506 non-null    float64\n",
      " 5   RM       506 non-null    float64\n",
      " 6   AGE      506 non-null    float64\n",
      " 7   DIS      506 non-null    float64\n",
      " 8   RAD      506 non-null    float64\n",
      " 9   TAX      506 non-null    float64\n",
      " 10  PTRATIO  506 non-null    float64\n",
      " 11  B        506 non-null    float64\n",
      " 12  LSTAT    506 non-null    float64\n",
      " 13  PRICE    506 non-null    float64\n",
      "dtypes: float64(14)\n",
      "memory usage: 55.5 KB\n"
     ]
    }
   ],
   "source": [
    "data.info()"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.039786,
     "end_time": "2020-10-07T20:55:57.281403",
     "exception": false,
     "start_time": "2020-10-07T20:55:57.241617",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<a id = 'visual'></a>\n",
    "# Visualisation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-07T20:55:57.367573Z",
     "iopub.status.busy": "2020-10-07T20:55:57.366737Z",
     "iopub.status.idle": "2020-10-07T20:55:57.863164Z",
     "shell.execute_reply": "2020-10-07T20:55:57.864194Z"
    },
    "papermill": {
     "duration": 0.543321,
     "end_time": "2020-10-07T20:55:57.864519",
     "exception": false,
     "start_time": "2020-10-07T20:55:57.321198",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\gdalv\\AppData\\Roaming\\Python\\Python310\\site-packages\\seaborn\\distributions.py:2619: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n",
      "  warnings.warn(msg, FutureWarning)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='PRICE', ylabel='Density'>"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#checking the distribution of the target variable\n",
    "import seaborn as sns\n",
    "sns.distplot(data.PRICE)"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.04572,
     "end_time": "2020-10-07T20:55:57.964996",
     "exception": false,
     "start_time": "2020-10-07T20:55:57.919276",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "The distribution seems normal, has not be the data normal we would have perform log transformation or took to square root of the data to make the data normal. Normal distribution is need for the machine learning for better predictiblity of the model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-07T20:55:58.080129Z",
     "iopub.status.busy": "2020-10-07T20:55:58.078725Z",
     "iopub.status.idle": "2020-10-07T20:55:58.226472Z",
     "shell.execute_reply": "2020-10-07T20:55:58.224803Z"
    },
    "papermill": {
     "duration": 0.21182,
     "end_time": "2020-10-07T20:55:58.226727",
     "exception": false,
     "start_time": "2020-10-07T20:55:58.014907",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\gdalv\\AppData\\Roaming\\Python\\Python310\\site-packages\\seaborn\\_decorators.py:36: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='PRICE'>"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Distribution using box plot\n",
    "sns.boxplot(data.PRICE)"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.048673,
     "end_time": "2020-10-07T20:55:58.330112",
     "exception": false,
     "start_time": "2020-10-07T20:55:58.281439",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<a id = 'corr'></a>\n",
    "### Checking the correlation of the independent feature with the dependent feature\n",
    "\n",
    "Correlation is a statistical technique that can show whether and how strongly pairs of variables are related.An intelligent correlation analysis can lead to a greater understanding of your data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-07T20:55:58.431699Z",
     "iopub.status.busy": "2020-10-07T20:55:58.430428Z",
     "iopub.status.idle": "2020-10-07T20:55:58.435634Z",
     "shell.execute_reply": "2020-10-07T20:55:58.434824Z"
    },
    "papermill": {
     "duration": 0.061756,
     "end_time": "2020-10-07T20:55:58.435768",
     "exception": false,
     "start_time": "2020-10-07T20:55:58.374012",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "CRIM      -0.388305\n",
       "ZN         0.360445\n",
       "INDUS     -0.483725\n",
       "CHAS       0.175260\n",
       "NOX       -0.427321\n",
       "RM         0.695360\n",
       "AGE       -0.376955\n",
       "DIS        0.249929\n",
       "RAD       -0.381626\n",
       "TAX       -0.468536\n",
       "PTRATIO   -0.507787\n",
       "B          0.333461\n",
       "LSTAT     -0.737663\n",
       "PRICE      1.000000\n",
       "Name: PRICE, dtype: float64"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#checking Correlation of the data \n",
    "correlation = data.corr()\n",
    "correlation.loc['PRICE']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-07T20:55:58.529605Z",
     "iopub.status.busy": "2020-10-07T20:55:58.528638Z",
     "iopub.status.idle": "2020-10-07T20:55:59.710877Z",
     "shell.execute_reply": "2020-10-07T20:55:59.711521Z"
    },
    "papermill": {
     "duration": 1.232381,
     "end_time": "2020-10-07T20:55:59.711688",
     "exception": false,
     "start_time": "2020-10-07T20:55:58.479307",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1080x864 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plotting the heatmap\n",
    "import matplotlib.pyplot as plt\n",
    "fig,axes = plt.subplots(figsize=(15,12))\n",
    "sns.heatmap(correlation,square = True,annot = True)"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.063671,
     "end_time": "2020-10-07T20:55:59.843186",
     "exception": false,
     "start_time": "2020-10-07T20:55:59.779515",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "By looking at the correlation plot LSAT is negatively correlated with -0.75 and RM is positively correlated to the price and PTRATIO is correlated negatively with -0.51"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-07T20:55:59.973935Z",
     "iopub.status.busy": "2020-10-07T20:55:59.973048Z",
     "iopub.status.idle": "2020-10-07T20:56:00.537078Z",
     "shell.execute_reply": "2020-10-07T20:56:00.536396Z"
    },
    "papermill": {
     "duration": 0.62852,
     "end_time": "2020-10-07T20:56:00.537213",
     "exception": false,
     "start_time": "2020-10-07T20:55:59.908693",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1440x360 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Checking the scatter plot with the most correlated features\n",
    "plt.figure(figsize = (20,5))\n",
    "features = ['LSTAT','RM','PTRATIO']\n",
    "for i, col in enumerate(features):\n",
    "    plt.subplot(1, len(features) , i+1)\n",
    "    x = data[col]\n",
    "    y = data.PRICE\n",
    "    plt.scatter(x, y, marker='o')\n",
    "    plt.title(\"Variation in House prices\")\n",
    "    plt.xlabel(col)\n",
    "    plt.ylabel('\"House prices in $1000\"')"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.049163,
     "end_time": "2020-10-07T20:56:00.640630",
     "exception": false,
     "start_time": "2020-10-07T20:56:00.591467",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<a id = 'split'></a>\n",
    "### Splitting the dependent feature and independent feature "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-07T20:56:00.746689Z",
     "iopub.status.busy": "2020-10-07T20:56:00.745862Z",
     "iopub.status.idle": "2020-10-07T20:56:00.749761Z",
     "shell.execute_reply": "2020-10-07T20:56:00.748926Z"
    },
    "papermill": {
     "duration": 0.060237,
     "end_time": "2020-10-07T20:56:00.749904",
     "exception": false,
     "start_time": "2020-10-07T20:56:00.689667",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#X = data[['LSTAT','RM','PTRATIO']]\n",
    "X = data.iloc[:,:-1]\n",
    "y= data.PRICE"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.049696,
     "end_time": "2020-10-07T20:56:00.848870",
     "exception": false,
     "start_time": "2020-10-07T20:56:00.799174",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<a id = 'valid'></a>\n",
    "### Splitting the data for Model Validation "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-07T20:56:00.955422Z",
     "iopub.status.busy": "2020-10-07T20:56:00.954564Z",
     "iopub.status.idle": "2020-10-07T20:56:01.027363Z",
     "shell.execute_reply": "2020-10-07T20:56:01.026674Z"
    },
    "papermill": {
     "duration": 0.127892,
     "end_time": "2020-10-07T20:56:01.027528",
     "exception": false,
     "start_time": "2020-10-07T20:56:00.899636",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Splitting the data into train and test for building the model\n",
    "from sklearn.model_selection import train_test_split\n",
    "X_train, X_test, y_train, y_test = train_test_split(X,y, test_size = 0.2, random_state = 4)"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.04873,
     "end_time": "2020-10-07T20:56:01.127287",
     "exception": false,
     "start_time": "2020-10-07T20:56:01.078557",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<a id = 'build'></a>\n",
    "### Building the Model "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-07T20:56:01.232610Z",
     "iopub.status.busy": "2020-10-07T20:56:01.231721Z",
     "iopub.status.idle": "2020-10-07T20:56:01.351412Z",
     "shell.execute_reply": "2020-10-07T20:56:01.350526Z"
    },
    "papermill": {
     "duration": 0.174952,
     "end_time": "2020-10-07T20:56:01.351555",
     "exception": false,
     "start_time": "2020-10-07T20:56:01.176603",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#Linear Regression \n",
    "from sklearn.linear_model import LinearRegression\n",
    "regressor = LinearRegression()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-07T20:56:01.531645Z",
     "iopub.status.busy": "2020-10-07T20:56:01.530133Z",
     "iopub.status.idle": "2020-10-07T20:56:01.539001Z",
     "shell.execute_reply": "2020-10-07T20:56:01.538076Z"
    },
    "papermill": {
     "duration": 0.134823,
     "end_time": "2020-10-07T20:56:01.539185",
     "exception": false,
     "start_time": "2020-10-07T20:56:01.404362",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LinearRegression()"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Fitting the model\n",
    "regressor.fit(X_train,y_train)"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.058616,
     "end_time": "2020-10-07T20:56:01.652280",
     "exception": false,
     "start_time": "2020-10-07T20:56:01.593664",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<a id = 'evaluate'></a>\n",
    "### Model Evaluation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-07T20:56:01.779402Z",
     "iopub.status.busy": "2020-10-07T20:56:01.778398Z",
     "iopub.status.idle": "2020-10-07T20:56:01.782567Z",
     "shell.execute_reply": "2020-10-07T20:56:01.781875Z"
    },
    "papermill": {
     "duration": 0.077452,
     "end_time": "2020-10-07T20:56:01.782725",
     "exception": false,
     "start_time": "2020-10-07T20:56:01.705273",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#Prediction on the test dataset\n",
    "y_pred = regressor.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-07T20:56:01.907289Z",
     "iopub.status.busy": "2020-10-07T20:56:01.905853Z",
     "iopub.status.idle": "2020-10-07T20:56:01.911015Z",
     "shell.execute_reply": "2020-10-07T20:56:01.912063Z"
    },
    "papermill": {
     "duration": 0.071746,
     "end_time": "2020-10-07T20:56:01.912362",
     "exception": false,
     "start_time": "2020-10-07T20:56:01.840616",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5.041784121402057\n"
     ]
    }
   ],
   "source": [
    "# Predicting RMSE the Test set results\n",
    "from sklearn.metrics import mean_squared_error\n",
    "rmse = (np.sqrt(mean_squared_error(y_test, y_pred)))\n",
    "print(rmse)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-07T20:56:02.044764Z",
     "iopub.status.busy": "2020-10-07T20:56:02.043712Z",
     "iopub.status.idle": "2020-10-07T20:56:02.048680Z",
     "shell.execute_reply": "2020-10-07T20:56:02.050718Z"
    },
    "papermill": {
     "duration": 0.075393,
     "end_time": "2020-10-07T20:56:02.051676",
     "exception": false,
     "start_time": "2020-10-07T20:56:01.976283",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.7263451459702503\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import r2_score\n",
    "r2 = r2_score(y_test, y_pred)\n",
    "print(r2)"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.052899,
     "end_time": "2020-10-07T20:56:02.160829",
     "exception": false,
     "start_time": "2020-10-07T20:56:02.107930",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<a id  = 'NN'></a>\n",
    "## Neural Networks"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-07T20:56:02.279947Z",
     "iopub.status.busy": "2020-10-07T20:56:02.279001Z",
     "iopub.status.idle": "2020-10-07T20:56:02.291535Z",
     "shell.execute_reply": "2020-10-07T20:56:02.290743Z"
    },
    "papermill": {
     "duration": 0.077294,
     "end_time": "2020-10-07T20:56:02.291688",
     "exception": false,
     "start_time": "2020-10-07T20:56:02.214394",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#Scaling the dataset\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "sc = StandardScaler()\n",
    "X_train = sc.fit_transform(X_train)\n",
    "X_test = sc.transform(X_test)"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.053021,
     "end_time": "2020-10-07T20:56:02.400133",
     "exception": false,
     "start_time": "2020-10-07T20:56:02.347112",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "* We are using Keras for developing the neural network.\n",
    "* Models in Keras are defined as a sequence of layers\n",
    "* We create a Sequential model and add layers one at a time with activation function\n",
    "* Activation function decides, whether a neuron should be activated or not by calculating weighted sum and further adding bias with it. The purpose of the activation function is to introduce non-linearity into the output of a neuron.The activation we are using is relu\n",
    "* As this is a regression problem, the output layer has no activation function\n",
    "* Elements of neural network has input layer, hidden layer and output layer\n",
    "* input layer:- This layer accepts input features. It provides information from the outside world to the network, no computation is performed at this layer, nodes here just pass on the information(features) to the hidden layer.\n",
    "* Hidden layer:-  Nodes of this layer are not exposed to the outer world, they are the part of the abstraction provided by any neural network. Hidden layer performs all sort of computation on the features entered through the input layer and transfer the result to the output layer.\n",
    "* Output layer:- This layer bring up the information learned by the network to the outer world.\n",
    "* Model Compilation:- The compilation is the final step in creating a model. Once the compilation is done, we can move on to training phase.\n",
    "* Optimizer : - The optimizer we are using is adam. Adam is an optimization algorithm that can be used instead of the classical stochastic gradient descent procedure to update network weights iterative based in training data.\n",
    "* Loss - mean square error"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-07T20:56:02.521142Z",
     "iopub.status.busy": "2020-10-07T20:56:02.520202Z",
     "iopub.status.idle": "2020-10-07T20:56:02.813516Z",
     "shell.execute_reply": "2020-10-07T20:56:02.812803Z"
    },
    "papermill": {
     "duration": 0.36162,
     "end_time": "2020-10-07T20:56:02.813669",
     "exception": false,
     "start_time": "2020-10-07T20:56:02.452049",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#Creating the neural network model\n",
    "import keras\n",
    "from keras.layers import Dense, Activation,Dropout\n",
    "from keras.models import Sequential\n",
    "\n",
    "model = Sequential()\n",
    "\n",
    "model.add(Dense(128,activation  = 'relu',input_dim =13))\n",
    "model.add(Dense(64,activation  = 'relu'))\n",
    "model.add(Dense(32,activation  = 'relu'))\n",
    "model.add(Dense(16,activation  = 'relu'))\n",
    "model.add(Dense(1))\n",
    "model.compile(optimizer = 'adam',loss = 'mean_squared_error')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-07T20:56:02.934653Z",
     "iopub.status.busy": "2020-10-07T20:56:02.933663Z",
     "iopub.status.idle": "2020-10-07T20:56:07.137189Z",
     "shell.execute_reply": "2020-10-07T20:56:07.137910Z"
    },
    "papermill": {
     "duration": 4.268213,
     "end_time": "2020-10-07T20:56:07.138097",
     "exception": false,
     "start_time": "2020-10-07T20:56:02.869884",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/100\n",
      "13/13 [==============================] - 1s 3ms/step - loss: 563.3159\n",
      "Epoch 2/100\n",
      "13/13 [==============================] - 0s 2ms/step - loss: 501.5890\n",
      "Epoch 3/100\n",
      "13/13 [==============================] - 0s 2ms/step - loss: 366.6654\n",
      "Epoch 4/100\n",
      "13/13 [==============================] - 0s 2ms/step - loss: 155.0419\n",
      "Epoch 5/100\n",
      "13/13 [==============================] - 0s 2ms/step - loss: 71.9058\n",
      "Epoch 6/100\n",
      "13/13 [==============================] - 0s 2ms/step - loss: 40.7743\n",
      "Epoch 7/100\n",
      "13/13 [==============================] - 0s 2ms/step - loss: 28.4232\n",
      "Epoch 8/100\n",
      "13/13 [==============================] - 0s 2ms/step - loss: 23.0547\n",
      "Epoch 9/100\n",
      "13/13 [==============================] - 0s 2ms/step - loss: 20.4405\n",
      "Epoch 10/100\n",
      "13/13 [==============================] - 0s 2ms/step - loss: 18.7347\n",
      "Epoch 11/100\n",
      "13/13 [==============================] - 0s 2ms/step - loss: 17.1926\n",
      "Epoch 12/100\n",
      "13/13 [==============================] - 0s 2ms/step - loss: 16.2740\n",
      "Epoch 13/100\n",
      "13/13 [==============================] - 0s 2ms/step - loss: 15.3652\n",
      "Epoch 14/100\n",
      "13/13 [==============================] - 0s 2ms/step - loss: 14.6631\n",
      "Epoch 15/100\n",
      "13/13 [==============================] - 0s 2ms/step - loss: 14.4074\n",
      "Epoch 16/100\n",
      "13/13 [==============================] - 0s 2ms/step - loss: 13.4164\n",
      "Epoch 17/100\n",
      "13/13 [==============================] - 0s 2ms/step - loss: 12.9791\n",
      "Epoch 18/100\n",
      "13/13 [==============================] - 0s 2ms/step - loss: 12.7508\n",
      "Epoch 19/100\n",
      "13/13 [==============================] - 0s 2ms/step - loss: 12.2624\n",
      "Epoch 20/100\n",
      "13/13 [==============================] - 0s 2ms/step - loss: 11.9284\n",
      "Epoch 21/100\n",
      "13/13 [==============================] - 0s 2ms/step - loss: 11.7339\n",
      "Epoch 22/100\n",
      "13/13 [==============================] - 0s 3ms/step - loss: 11.2518\n",
      "Epoch 23/100\n",
      "13/13 [==============================] - 0s 3ms/step - loss: 11.0228\n",
      "Epoch 24/100\n",
      "13/13 [==============================] - 0s 2ms/step - loss: 10.8607\n",
      "Epoch 25/100\n",
      "13/13 [==============================] - 0s 2ms/step - loss: 10.4705\n",
      "Epoch 26/100\n",
      "13/13 [==============================] - 0s 2ms/step - loss: 10.5055\n",
      "Epoch 27/100\n",
      "13/13 [==============================] - 0s 2ms/step - loss: 10.2065\n",
      "Epoch 28/100\n",
      "13/13 [==============================] - 0s 2ms/step - loss: 9.9856\n",
      "Epoch 29/100\n",
      "13/13 [==============================] - 0s 2ms/step - loss: 9.7969\n",
      "Epoch 30/100\n",
      "13/13 [==============================] - 0s 2ms/step - loss: 9.9357\n",
      "Epoch 31/100\n",
      "13/13 [==============================] - 0s 2ms/step - loss: 9.7355\n",
      "Epoch 32/100\n",
      "13/13 [==============================] - 0s 2ms/step - loss: 9.1473\n",
      "Epoch 33/100\n",
      "13/13 [==============================] - 0s 2ms/step - loss: 9.3084\n",
      "Epoch 34/100\n",
      "13/13 [==============================] - 0s 2ms/step - loss: 9.0142\n",
      "Epoch 35/100\n",
      "13/13 [==============================] - 0s 2ms/step - loss: 8.7820\n",
      "Epoch 36/100\n",
      "13/13 [==============================] - 0s 2ms/step - loss: 8.5546\n",
      "Epoch 37/100\n",
      "13/13 [==============================] - 0s 2ms/step - loss: 8.6269\n",
      "Epoch 38/100\n",
      "13/13 [==============================] - 0s 2ms/step - loss: 8.4091\n",
      "Epoch 39/100\n",
      "13/13 [==============================] - 0s 2ms/step - loss: 8.2848\n",
      "Epoch 40/100\n",
      "13/13 [==============================] - 0s 2ms/step - loss: 7.9578\n",
      "Epoch 41/100\n",
      "13/13 [==============================] - 0s 2ms/step - loss: 7.7612\n",
      "Epoch 42/100\n",
      "13/13 [==============================] - 0s 2ms/step - loss: 7.7153\n",
      "Epoch 43/100\n",
      "13/13 [==============================] - 0s 2ms/step - loss: 7.7634\n",
      "Epoch 44/100\n",
      "13/13 [==============================] - 0s 2ms/step - loss: 7.4754\n",
      "Epoch 45/100\n",
      "13/13 [==============================] - 0s 2ms/step - loss: 7.2618\n",
      "Epoch 46/100\n",
      "13/13 [==============================] - 0s 2ms/step - loss: 7.1263\n",
      "Epoch 47/100\n",
      "13/13 [==============================] - 0s 2ms/step - loss: 7.0390\n",
      "Epoch 48/100\n",
      "13/13 [==============================] - 0s 2ms/step - loss: 6.8745\n",
      "Epoch 49/100\n",
      "13/13 [==============================] - 0s 2ms/step - loss: 6.6266\n",
      "Epoch 50/100\n",
      "13/13 [==============================] - 0s 2ms/step - loss: 6.7758\n",
      "Epoch 51/100\n",
      "13/13 [==============================] - 0s 2ms/step - loss: 6.6196\n",
      "Epoch 52/100\n",
      "13/13 [==============================] - 0s 2ms/step - loss: 6.2501\n",
      "Epoch 53/100\n",
      "13/13 [==============================] - 0s 2ms/step - loss: 6.2896\n",
      "Epoch 54/100\n",
      "13/13 [==============================] - 0s 2ms/step - loss: 6.3704\n",
      "Epoch 55/100\n",
      "13/13 [==============================] - 0s 2ms/step - loss: 6.0671\n",
      "Epoch 56/100\n",
      "13/13 [==============================] - 0s 2ms/step - loss: 5.8727\n",
      "Epoch 57/100\n",
      "13/13 [==============================] - 0s 2ms/step - loss: 6.1572\n",
      "Epoch 58/100\n",
      "13/13 [==============================] - 0s 2ms/step - loss: 5.7986\n",
      "Epoch 59/100\n",
      "13/13 [==============================] - 0s 2ms/step - loss: 5.6451\n",
      "Epoch 60/100\n",
      "13/13 [==============================] - 0s 2ms/step - loss: 5.5917\n",
      "Epoch 61/100\n",
      "13/13 [==============================] - 0s 2ms/step - loss: 6.0675\n",
      "Epoch 62/100\n",
      "13/13 [==============================] - 0s 2ms/step - loss: 5.3905\n",
      "Epoch 63/100\n",
      "13/13 [==============================] - 0s 2ms/step - loss: 5.4172\n",
      "Epoch 64/100\n",
      "13/13 [==============================] - 0s 2ms/step - loss: 5.1796\n",
      "Epoch 65/100\n",
      "13/13 [==============================] - 0s 2ms/step - loss: 4.9888\n",
      "Epoch 66/100\n",
      "13/13 [==============================] - 0s 2ms/step - loss: 5.3156\n",
      "Epoch 67/100\n",
      "13/13 [==============================] - 0s 2ms/step - loss: 5.1464\n",
      "Epoch 68/100\n",
      "13/13 [==============================] - 0s 2ms/step - loss: 5.0524\n",
      "Epoch 69/100\n",
      "13/13 [==============================] - 0s 2ms/step - loss: 4.8972\n",
      "Epoch 70/100\n",
      "13/13 [==============================] - 0s 2ms/step - loss: 4.8128\n",
      "Epoch 71/100\n",
      "13/13 [==============================] - 0s 2ms/step - loss: 4.7170\n",
      "Epoch 72/100\n",
      "13/13 [==============================] - 0s 2ms/step - loss: 4.7933\n",
      "Epoch 73/100\n",
      "13/13 [==============================] - 0s 2ms/step - loss: 4.6601\n",
      "Epoch 74/100\n",
      "13/13 [==============================] - 0s 2ms/step - loss: 4.5801\n",
      "Epoch 75/100\n",
      "13/13 [==============================] - 0s 2ms/step - loss: 4.4648\n",
      "Epoch 76/100\n",
      "13/13 [==============================] - 0s 2ms/step - loss: 4.4170\n",
      "Epoch 77/100\n",
      "13/13 [==============================] - 0s 2ms/step - loss: 4.2981\n",
      "Epoch 78/100\n",
      "13/13 [==============================] - 0s 2ms/step - loss: 4.3322\n",
      "Epoch 79/100\n",
      "13/13 [==============================] - 0s 2ms/step - loss: 4.2547\n",
      "Epoch 80/100\n",
      "13/13 [==============================] - 0s 2ms/step - loss: 4.1987\n",
      "Epoch 81/100\n",
      "13/13 [==============================] - 0s 2ms/step - loss: 4.3049\n",
      "Epoch 82/100\n",
      "13/13 [==============================] - 0s 2ms/step - loss: 4.3821\n",
      "Epoch 83/100\n",
      "13/13 [==============================] - 0s 2ms/step - loss: 3.9092\n",
      "Epoch 84/100\n",
      "13/13 [==============================] - 0s 2ms/step - loss: 4.1693\n",
      "Epoch 85/100\n",
      "13/13 [==============================] - 0s 2ms/step - loss: 3.9212\n",
      "Epoch 86/100\n",
      "13/13 [==============================] - 0s 2ms/step - loss: 4.0723\n",
      "Epoch 87/100\n",
      "13/13 [==============================] - 0s 2ms/step - loss: 3.8634\n",
      "Epoch 88/100\n",
      "13/13 [==============================] - 0s 2ms/step - loss: 4.0444\n",
      "Epoch 89/100\n",
      "13/13 [==============================] - 0s 2ms/step - loss: 3.8160\n",
      "Epoch 90/100\n",
      "13/13 [==============================] - 0s 2ms/step - loss: 3.7094\n",
      "Epoch 91/100\n",
      "13/13 [==============================] - 0s 2ms/step - loss: 3.7065\n",
      "Epoch 92/100\n",
      "13/13 [==============================] - 0s 2ms/step - loss: 3.6865\n",
      "Epoch 93/100\n",
      "13/13 [==============================] - 0s 2ms/step - loss: 3.8382\n",
      "Epoch 94/100\n",
      "13/13 [==============================] - 0s 2ms/step - loss: 3.6737\n",
      "Epoch 95/100\n",
      "13/13 [==============================] - 0s 2ms/step - loss: 3.6077\n",
      "Epoch 96/100\n",
      "13/13 [==============================] - 0s 2ms/step - loss: 3.4857\n",
      "Epoch 97/100\n",
      "13/13 [==============================] - 0s 2ms/step - loss: 3.6583\n",
      "Epoch 98/100\n",
      "13/13 [==============================] - 0s 2ms/step - loss: 3.8278\n",
      "Epoch 99/100\n",
      "13/13 [==============================] - 0s 2ms/step - loss: 3.5358\n",
      "Epoch 100/100\n",
      "13/13 [==============================] - 0s 2ms/step - loss: 3.3656\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.callbacks.History at 0x1a01e7b6d70>"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.fit(X_train, y_train, epochs = 100)"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {
    "papermill": {
     "duration": 0.144695,
     "end_time": "2020-10-07T20:56:07.429767",
     "exception": false,
     "start_time": "2020-10-07T20:56:07.285072",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "<a id = 'eval'></a>\n",
    "### Evaluation of the model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-07T20:56:07.725859Z",
     "iopub.status.busy": "2020-10-07T20:56:07.724391Z",
     "iopub.status.idle": "2020-10-07T20:56:07.944661Z",
     "shell.execute_reply": "2020-10-07T20:56:07.945236Z"
    },
    "papermill": {
     "duration": 0.370667,
     "end_time": "2020-10-07T20:56:07.945463",
     "exception": false,
     "start_time": "2020-10-07T20:56:07.574796",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4/4 [==============================] - 0s 2ms/step\n"
     ]
    }
   ],
   "source": [
    "y_pred = model.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-07T20:56:08.252035Z",
     "iopub.status.busy": "2020-10-07T20:56:08.251041Z",
     "iopub.status.idle": "2020-10-07T20:56:08.255851Z",
     "shell.execute_reply": "2020-10-07T20:56:08.255145Z"
    },
    "papermill": {
     "duration": 0.159132,
     "end_time": "2020-10-07T20:56:08.255991",
     "exception": false,
     "start_time": "2020-10-07T20:56:08.096859",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.9094182609708286\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import r2_score\n",
    "r2 = r2_score(y_test, y_pred)\n",
    "print(r2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2020-10-07T20:56:08.557357Z",
     "iopub.status.busy": "2020-10-07T20:56:08.556409Z",
     "iopub.status.idle": "2020-10-07T20:56:08.560011Z",
     "shell.execute_reply": "2020-10-07T20:56:08.560689Z"
    },
    "papermill": {
     "duration": 0.156747,
     "end_time": "2020-10-07T20:56:08.560855",
     "exception": false,
     "start_time": "2020-10-07T20:56:08.404108",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2.9007012044499842\n"
     ]
    }
   ],
   "source": [
    "# Predicting RMSE the Test set results\n",
    "from sklearn.metrics import mean_squared_error\n",
    "rmse = (np.sqrt(mean_squared_error(y_test, y_pred)))\n",
    "print(rmse)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.4"
  },
  "papermill": {
   "duration": 28.602522,
   "end_time": "2020-10-07T20:56:09.403032",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2020-10-07T20:55:40.800510",
   "version": "2.1.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
